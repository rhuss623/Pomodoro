{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SetTimer","_ref","type","icon","value","handleClick","react_default","a","createElement","className","id","index_es","faAngleDoubleDown","size","onClick","concat","faAngleDoubleUp","Timer","_ref2","time","running","handleReset","handleStartStop","class","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSetTimer","increment","state","setState","defineProperty","started","sessionValue","breakValue","clearInterval","runTimer","audio","pause","setInterval","timerMode","prevProps","prevState","src","play","_this2","App_SetTimer","faBed","faBrain","App_Timer","moment","format","ref","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b882e77.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDoubleUp, faAngleDoubleDown, faBed, faBrain } from '@fortawesome/free-solid-svg-icons';\nimport moment from 'moment'\n\nconst SetTimer = ({ type, icon, value, handleClick }) => {\n    return(\n        <div className=\"section\">\n            <div className=\"card center-align\">\n                <span id=\"`${type}`-label\" className=\"card-title\">{type===\"session\" ? \"Session\" : \"Break\"} Length</span>\n                    <div className=\"wrapper\">  \n                        <span id=\"break-length\" className=\"length\">{value}</span>\n                    </div>\n                <div className=\"card-content\">\n                    <div className=\"row\">\n                        <FontAwesomeIcon id=\"`${type}`-decrement\" className=\"green-btn col s4 hoverable offset-s2\" icon={ faAngleDoubleDown } size=\"3x\" onClick={() => handleClick(false, `${type}Value`)} />\n                        <FontAwesomeIcon id=\"`${type}`-increment\" className=\"red-btn col s4 hoverable\" icon={ faAngleDoubleUp } size=\"3x\" onClick={() => handleClick(true, `${type}Value`)} /> \n                    </div>       \n                    <FontAwesomeIcon icon={ icon } size=\"3x\" />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst Timer = ({ icon, time, running, handleReset, handleStartStop }) => {\n    return(\n        <div class=\"container center\">\n            <div className=\"row\">\n                <FontAwesomeIcon icon={ icon } size=\"6x\" />\n            </div>\n            <div className=\"row\">\n                <span id=\"time-left\">{ time }</span>\n            </div>\n            <button id=\"start_stop\" onClick={() => handleStartStop()}>{ running }</button>\n            <button id=\"reset\" onClick={() => handleReset()}>Reset</button>\n        </div>\n    )\n}\n\nclass App extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            breakValue: 5,\n            sessionValue: 25,\n            timerMode: \"session\",\n            time: 25 * 60 * 1000,\n            running: false,\n            started: false \n        }\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevState.time===0 && prevState.timerMode===\"session\") {\n            this.setState({\n                timerMode: \"break\",\n                time: this.state.breakValue * 60 * 1000\n            })\n            this.audio.src=\"http://www.africanvulture.com/uploads/2/9/2/1/29211623/5_sec_crowd_cheer-mike_koenig-1562033255.mp3\"\n            this.audio.play()\n        }\n        if (prevState.time===0 && prevState.timerMode===\"break\") {\n            this.setState({\n                timerMode: \"session\",\n                time: this.state.sessionValue * 60 * 1000 \n            })\n            this.audio.src=\"http://sfxcontent.s3.amazonaws.com/soundfx/BoxingBell.mp3\"\n            this.audio.play()\n        }\n    }\n    handleSetTimer = (increment, type) => {\n        if (this.state[type]===60 && increment) return;\n        if (this.state[type]===1 && !increment) return;\n        this.setState({\n            [type]: this.state[type] + (increment ? 1 : -1)\n        })\n        if (this.state.time === 3600000 && increment && this.state.started === false) return;\n        if (this.state.time === 60000 && !increment && this.state.started === false) return;\n        if (this.state[type]===this.state.sessionValue && this.state.started === false){\n            this.setState({\n                time: this.state.time + (increment ? 60000 : -60000)\n            })\n        }\n    }\n\n    handleReset = () => {\n        this.setState({\n            breakValue: 5,\n            sessionValue: 25,\n            time: 25 * 60 * 1000,\n            running: false,\n            started: false\n        })\n        clearInterval(this.runTimer)\n        this.audio.pause()\n        \n    }\n\n    handleStartStop = () => {\n        this.setState({\n            running: !this.state.running\n        })\n        if (this.state.running){\n            clearInterval(this.runTimer)\n        }\n        else{\n        this.runTimer = setInterval(\n                () => this.setState({\n                    time: this.state.time - 1000\n                }), 1000)\n        this.setState({\n            started: true\n        })\n            }\n        }\n    \n  render() {\n    return (\n      <div className=\"container outer-container\">\n       <h1 className=\"center\">Productivity Timer</h1>\n        <div className=\"wrapper content-wrap\">\n          <div className=\"row\">\n            <div className=\"offset-m1 col s12 m5\">\n              <SetTimer type='break' icon={ faBed } value={this.state.breakValue} handleClick={this.handleSetTimer} />\n            </div>\n            <div className=\"col s12 m5\">\n              <SetTimer type='session' icon={ faBrain } value={this.state.sessionValue} handleClick={this.handleSetTimer} />\n            </div>\n          </div>\n          <div>\n              <Timer icon={this.state.timerMode === \"session\" ? faBrain : faBed} \n              time={this.state.time < 3600000 ? moment(this.state.time).format('mm:ss') : \"60:00\"} \n              running={this.state.running===true ? \"Pause\" : \"Start\"}\n              handleReset={this.handleReset}\n              handleStartStop={this.handleStartStop}\n              />\n          </div>\n        </div>\n        <audio id=\"beep\" src=\"\" ref={ref => this.audio = ref}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}